type: edu
custom_name: stage3
files:
- name: src/phonebook/Main.kt
  visible: true
  text: |-
    package phonebook

    import java.io.File
    import java.util.*

    fun main() {
        PhoneBook.start()
    }

    //class Main() {
    //    init {
    //        PhoneBook.start()
    //    }
    //}

    object PhoneBook {
        private lateinit var file: File
        private var indexed = mutableMapOf<String, MutableList<Long>>()
        private var data = mutableListOf<String>()

        private val userInput = Scanner(System.`in`)

        fun start() {
            file = File("C:\\tst\\directory.txt")
            data = file.readLines().toMutableList()
    //        readFileToList()
            searchByFile()
    //        menu()
        }

        private fun searchByFile() {
            var stringsToFind = File("C:\\tst\\find.txt").readLines()
            val total = stringsToFind.size
            println("Start searching...")
            val start = System.currentTimeMillis()
            var count = 0

            data.map {
                for (req in stringsToFind) {
                    if (it.contains(req)) count++
                }
            }
            if (count > total) count = total
            val endTime = System.currentTimeMillis() - start
            println("Found $count / $total entries. Time taken: " +
                    "${String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", endTime)}" )

        }

        private fun menu() {
            println("""
                1. Search with index
                2. Search native
                0. Exit
            """.trimIndent())
            when (userInput.nextLine().toInt()) {
                1 -> {
                    print("Enter a query: ")
                    val request = userInput.nextLine()
                    searchIndexed(request)
                }
                2 -> {
                    print("Enter a query: ")
                    val request = userInput.nextLine()
                    searchNative(request)
                }
                0 -> return
            }
            menu()
        }

        private fun searchNative(value: String) {
            println("Start native searching...")
            val start = System.currentTimeMillis()
            val found = data.filter { it.contains(value) }
            if (found.isEmpty()) {
                println("No records found")
            } else {
                found.map {
                    println(it)
                }
                println("Found ${found.size} / ${data.size}")
            }
            val endTime = System.currentTimeMillis() - start

            println(String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", endTime))
        }

        private fun searchIndexed(value: String) {
            println("Start searching with index...")
            val start = System.currentTimeMillis()
            val indexedValue = indexed[value.toLowerCase()] ?: listOf<Long>()
            val found = data.filterIndexed { index, _ -> indexedValue.contains(index.toLong()) }
            if (found.isEmpty()) {
                println("No records found")
            } else {
                println(found.size)
                found.map {
                    println(it)
                }
                println("Found ${found.size} / ${data.size}")
            }
            val endTime = System.currentTimeMillis() - start
            println(String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", endTime))
        }

        private fun readFileToList() {
            println("Start indexing...")
            val start = System.currentTimeMillis()
            var idx = 0L
            file.forEachLine {
                data.add(it)
                it.split(" ").drop(1).map { el ->
                    val i = el.toLowerCase()
                    if (indexed.containsKey(i)) {
                        indexed[i]?.add(idx)
                    } else indexed.put(i, mutableListOf(idx))
                }
                idx++
            }
            val endTime = System.currentTimeMillis() - start
            println(String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", endTime))
            println("Indexed ${indexed.size} words.")
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\nimport phonebook.MainKt;\n\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ PhoneBookTest extends StageTest {\n    public PhoneBookTest() {\n        super(MainKt.class);\n\
    \    }\n    \n    private long timeOnTestStart;\n    \n    @Override\n    public\
    \ List<TestCase> generate() {\n        timeOnTestStart = System.currentTimeMillis();\n\
    \        return Arrays.asList(\n                new TestCase().setTimeLimit(30\
    \ * 60 * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.wrong(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.wrong(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.correct();\n   \
    \ }\n}\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/86/stages/478/implement#comment
status: Unchecked
record: -1
